const prisma = require('../config/database');
const logger = require('../config/logger');
const serviceAuth = require('../services/auth.service');
const emailService = require('../services/email.service');
const ErrorHandler = require('../utils/errorHandler');
// PDF generation is now handled by the frontend
// Cloudinary operations are now handled by the frontend
const { creerIdentifiantsSchema, creerNouveauMembreSchema, genererCartesMembreSchema } = require('../schemas/auth.schema');

class ControleurSecretaire {

  /**
   * Tableau de bord secr√©taire - Lister les membres qui ont pay√© mais n'ont pas soumis le formulaire
   */
  async obtenirTableauBord(req, res) {
    try {
      const { page = 1, limite = 10, recherche = '' } = req.query;
      const offset = (parseInt(page) - 1) * parseInt(limite);

      // Construire les conditions de recherche
      const conditionsRecherche = recherche ? {
        OR: [
          { prenoms: { contains: recherche, mode: 'insensitive' } },
          { nom: { contains: recherche, mode: 'insensitive' } },
          { telephone: { contains: recherche } },
          { nom_utilisateur: { contains: recherche, mode: 'insensitive' } }
        ]
      } : {};

      // Lister les membres qui ont des identifiants mais n'ont pas soumis le formulaire
      // (Ces membres ont d√©j√† pay√© en cash et re√ßu leurs identifiants)
      const membres = await prisma.utilisateur.findMany({
        where: {
          AND: [
            { NOT: { nom_utilisateur: null } }, // Ont des identifiants
            { a_soumis_formulaire: false }, // N'ont pas soumis le formulaire
            { role: 'MEMBRE' }, // Exclure les admins
            conditionsRecherche
          ]
        },
        select: {
          id: true,
          prenoms: true,
          nom: true,
          telephone: true,
          nom_utilisateur: true,
          statut: true,
          role: true,
          cree_le: true,
          derniere_connexion: true,
          doit_changer_mot_passe: true
        },
        orderBy: { cree_le: 'desc' },
        skip: offset,
        take: parseInt(limite)
      });

      // Compter le total pour la pagination
      const totalMembres = await prisma.utilisateur.count({
        where: {
          AND: [
            { NOT: { nom_utilisateur: null } }, // Ont des identifiants
            { a_soumis_formulaire: false }, // N'ont pas soumis le formulaire
            { role: 'MEMBRE' }, // Exclure les admins
            conditionsRecherche
          ]
        }
      });

      // Statistiques g√©n√©rales
      const statistiques = await this.obtenirStatistiques();

      res.json({
        message: 'Tableau de bord secr√©taire r√©cup√©r√©',
        donnees: {
          membres: membres.map(membre => ({
            ...membre,
            nom_complet: `${membre.prenoms} ${membre.nom}`,
            a_identifiants: !!membre.nom_utilisateur,
            statut_connexion: membre.derniere_connexion ? 'connecte' : 'jamais_connecte'
          })),
          pagination: {
            page: parseInt(page),
            limite: parseInt(limite),
            total: totalMembres,
            pages_total: Math.ceil(totalMembres / parseInt(limite))
          },
          statistiques
        }
      });

    } catch (error) {
      const context = {
        operation: 'secretary_dashboard',
        user_id: req.utilisateur?.id
      };
      return ErrorHandler.handleError(error, res, context);
    }
  }

  /**
   * Obtenir les statistiques pour le tableau de bord
   */
  async obtenirStatistiques() {
    try {
      // Exclure les r√¥les administratifs des statistiques
      const filtreNonAdmin = {
        role: { notIn: ['PRESIDENT', 'SECRETAIRE_GENERALE'] }
      };

      const [
        totalMembres,
        membresAvecIdentifiants,
        membresFormulaireSoumis,
        membresApprouves,
        membresEnAttente,
        membresRejetes,
        membresConnectesRecemment
      ] = await Promise.all([
        prisma.utilisateur.count({ where: filtreNonAdmin }),
        prisma.utilisateur.count({ 
          where: { 
            ...filtreNonAdmin,
            NOT: { nom_utilisateur: null } 
          } 
        }),
        prisma.utilisateur.count({ 
          where: { 
            ...filtreNonAdmin,
            a_soumis_formulaire: true 
          } 
        }),
        prisma.utilisateur.count({ 
          where: { 
            ...filtreNonAdmin,
            statut: 'APPROUVE' 
          } 
        }),
        prisma.utilisateur.count({ 
          where: { 
            ...filtreNonAdmin,
            statut: 'EN_ATTENTE' 
          } 
        }),
        prisma.utilisateur.count({ 
          where: { 
            ...filtreNonAdmin,
            statut: 'REJETE' 
          } 
        }),
        prisma.utilisateur.count({
          where: {
            ...filtreNonAdmin,
            derniere_connexion: {
              gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) // 7 derniers jours
            }
          }
        })
      ]);

      // Membres qui ont des identifiants mais n'ont pas soumis le formulaire
      const membresAvecIdentifiantsSansFormulaire = Math.max(0, membresAvecIdentifiants - membresFormulaireSoumis);

      return {
        total_membres: totalMembres || 0,
        membres_avec_identifiants: membresAvecIdentifiants || 0,
        membres_formulaire_soumis: membresFormulaireSoumis || 0,
        membres_approuves: membresApprouves || 0,
        membres_en_attente: membresEnAttente || 0,
        membres_rejetes: membresRejetes || 0,
        membres_connectes_recemment: membresConnectesRecemment || 0,
        // Calculs d√©riv√©s
        membres_avec_identifiants_sans_formulaire: membresAvecIdentifiantsSansFormulaire,
        taux_soumission_formulaire: membresAvecIdentifiants > 0 ? 
          Math.round((membresFormulaireSoumis / membresAvecIdentifiants) * 100) : 0,
        workflow_status: {
          etape_1_creation_identifiants: membresAvecIdentifiants,
          etape_2_soumission_formulaire: membresFormulaireSoumis,
          etape_3_approbation: membresApprouves
        }
      };
    } catch (error) {
      logger.error('Erreur calcul statistiques:', error);
      // Retourner des statistiques par d√©faut en cas d'erreur
      return {
        total_membres: 0,
        membres_avec_identifiants: 0,
        membres_formulaire_soumis: 0,
        membres_approuves: 0,
        membres_rejetes: 0,
        membres_en_attente: 0,
        membres_connectes_recemment: 0,
        membres_avec_identifiants_sans_formulaire: 0,
        taux_soumission_formulaire: 0,
        workflow_status: {
          etape_1_creation_identifiants: 0,
          etape_2_soumission_formulaire: 0,
          etape_3_approbation: 0
        }
      };
    }
  }

  /**
   * Cr√©er un nouveau membre avec identifiants (workflow moderne)
   */
  async creerNouveauMembre(req, res) {
    try {
      const donneesValidees = creerNouveauMembreSchema.parse(req.body);
      const idSecretaire = req.utilisateur.id;

      // Cr√©er le nouveau membre avec identifiants
      const resultat = await serviceAuth.creerNouveauMembre(
        donneesValidees.prenoms,
        donneesValidees.nom,
        donneesValidees.a_paye ?? true, // Default √† true
        donneesValidees.telephone,
        idSecretaire
      );

      res.status(201).json({
        message: 'Nouveau membre cr√©√© avec succ√®s',
        membre: {
          id: resultat.utilisateur.id,
          nom_complet: `${resultat.utilisateur.prenoms} ${resultat.utilisateur.nom}`,
          nom_utilisateur: resultat.nom_utilisateur,
          mot_passe_temporaire: resultat.mot_passe_temporaire,
          a_paye: resultat.utilisateur.a_paye,
          telephone: resultat.utilisateur.telephone
        },
        instructions: [
          'üîê Communiquez ces identifiants au membre de mani√®re s√©curis√©e',
          '‚ö†Ô∏è Le membre devra changer son mot de passe lors de sa premi√®re connexion',
          'üìù Le membre devra ensuite remplir son formulaire d\'adh√©sion complet',
          '‚úÖ Une fois le formulaire soumis, vous pourrez l\'approuver depuis le tableau de bord'
        ]
      });

    } catch (error) {
      const context = {
        operation: 'create_new_member',
        user_id: req.utilisateur?.id
      };
      return ErrorHandler.handleError(error, res, context);
    }
  }

  /**
   * DEPRECATED: Cr√©er des identifiants pour un membre qui a pay√© (ancien syst√®me)
   */
  async creerIdentifiants(req, res) {
    try {
      const donneesValidees = creerIdentifiantsSchema.parse(req.body);
      const idSecretaire = req.utilisateur.id;

      // V√©rifier que l'utilisateur existe et a pay√©
      const utilisateurCible = await prisma.utilisateur.findUnique({
        where: { id: donneesValidees.id_utilisateur }
      });

      if (!utilisateurCible) {
        return res.status(404).json({
          erreur: 'Utilisateur non trouv√©',
          code: 'UTILISATEUR_NON_TROUVE'
        });
      }

      if (!utilisateurCible.a_paye) {
        return res.status(400).json({
          erreur: 'L\'utilisateur doit avoir pay√© avant la cr√©ation des identifiants',
          code: 'PAIEMENT_NON_EFFECTUE'
        });
      }

      if (utilisateurCible.telephone !== donneesValidees.telephone) {
        return res.status(400).json({
          erreur: 'Le num√©ro de t√©l√©phone ne correspond pas',
          code: 'TELEPHONE_INCORRECT'
        });
      }

      // Cr√©er les identifiants
      const resultat = await serviceAuth.creerIdentifiants(
        donneesValidees.id_utilisateur,
        idSecretaire
      );

      res.status(201).json({
        message: 'Identifiants cr√©√©s avec succ√®s',
        identifiants: {
          nom_utilisateur: resultat.nom_utilisateur,
          mot_passe_temporaire: resultat.mot_passe_temporaire,
          utilisateur: {
            id: resultat.utilisateur.id,
            nom_complet: `${resultat.utilisateur.prenoms} ${resultat.utilisateur.nom}`,
            telephone: resultat.utilisateur.telephone
          }
        },
        instructions: [
          'Communiquez ces identifiants au membre de mani√®re s√©curis√©e',
          'Le membre devra changer son mot de passe lors de sa premi√®re connexion',
          'Le membre devra ensuite soumettre son formulaire d\'adh√©sion en ligne'
        ]
      });

    } catch (error) {
      if (error.name === 'ZodError') {
        return res.status(400).json({
          erreur: 'Donn√©es invalides',
          code: 'ERREUR_VALIDATION',
          details: error.errors
        });
      }

      if (error.message === 'Les identifiants ont d√©j√† √©t√© cr√©√©s pour cet utilisateur') {
        return res.status(409).json({
          erreur: error.message,
          code: 'IDENTIFIANTS_DEJA_CREES'
        });
      }

      logger.error('Erreur cr√©ation identifiants:', error);
      res.status(500).json({
        erreur: 'Erreur lors de la cr√©ation des identifiants',
        code: 'ERREUR_CREATION_IDENTIFIANTS'
      });
    }
  }

  /**
   * Marquer un membre comme ayant pay√©
   */
  async marquerCommePaye(req, res) {
    try {
      const { id_utilisateur } = req.body;
      const idSecretaire = req.utilisateur.id;

      if (!id_utilisateur || !Number.isInteger(id_utilisateur)) {
        return res.status(400).json({
          erreur: 'ID utilisateur requis et doit √™tre un entier',
          code: 'ID_UTILISATEUR_INVALIDE'
        });
      }

      // V√©rifier que l'utilisateur existe
      const utilisateur = await prisma.utilisateur.findUnique({
        where: { id: id_utilisateur }
      });

      if (!utilisateur) {
        return res.status(404).json({
          erreur: 'Utilisateur non trouv√©',
          code: 'UTILISATEUR_NON_TROUVE'
        });
      }

      if (utilisateur.a_paye) {
        return res.status(409).json({
          erreur: 'L\'utilisateur est d√©j√† marqu√© comme ayant pay√©',
          code: 'DEJA_PAYE'
        });
      }

      // Marquer comme pay√©
      const utilisateurMisAJour = await prisma.utilisateur.update({
        where: { id: id_utilisateur },
        data: { a_paye: true }
      });

      // Journal d'audit
      await prisma.journalAudit.create({
        data: {
          id_utilisateur: id_utilisateur,
          action: 'MARQUE_COMME_PAYE',
          details: {
            marque_par: idSecretaire,
            date_marquage: new Date()
          },
          adresse_ip: req.ip,
          agent_utilisateur: req.get('User-Agent')
        }
      });

      logger.info(`Utilisateur ${id_utilisateur} marqu√© comme pay√© par secr√©taire ${idSecretaire}`);

      res.json({
        message: 'Utilisateur marqu√© comme ayant pay√©',
        utilisateur: {
          id: utilisateurMisAJour.id,
          nom_complet: `${utilisateurMisAJour.prenoms} ${utilisateurMisAJour.nom}`,
          a_paye: utilisateurMisAJour.a_paye
        }
      });

    } catch (error) {
      logger.error('Erreur marquage paiement:', error);
      res.status(500).json({
        erreur: 'Erreur lors du marquage du paiement',
        code: 'ERREUR_MARQUAGE_PAIEMENT'
      });
    }
  }

  /**
   * Obtenir la liste de tous les membres pour gestion
   */
  async listerTousMembres(req, res) {
    try {
      const { page = 1, limite = 20, filtre = 'tous', recherche = '' } = req.query;
      const offset = (parseInt(page) - 1) * parseInt(limite);

      // Construire les conditions de filtre
      let conditionsFiltre = {};
      switch (filtre) {
        case 'paye':
          conditionsFiltre = { a_paye: true };
          break;
        case 'non_paye':
          conditionsFiltre = { a_paye: false };
          break;
        case 'formulaire_soumis':
          conditionsFiltre = { a_soumis_formulaire: true };
          break;
        case 'approuve':
          conditionsFiltre = { statut: 'APPROUVE' };
          break;
        case 'en_attente':
          conditionsFiltre = { statut: 'EN_ATTENTE' };
          break;
        case 'actifs':
          conditionsFiltre = { est_actif: true };
          break;
        case 'desactives':
          conditionsFiltre = { est_actif: false };
          break;
      }

      // Construire les conditions de recherche
      const conditionsRecherche = recherche ? {
        OR: [
          { prenoms: { contains: recherche, mode: 'insensitive' } },
          { nom: { contains: recherche, mode: 'insensitive' } },
          { telephone: { contains: recherche } },
          { email: { contains: recherche, mode: 'insensitive' } },
          { numero_adhesion: { contains: recherche, mode: 'insensitive' } }
        ]
      } : {};

      const membres = await prisma.utilisateur.findMany({
        where: {
          AND: [conditionsFiltre, conditionsRecherche]
        },
        select: {
          id: true,
          prenoms: true,
          nom: true,
          telephone: true,
          email: true,
          nom_utilisateur: true,
          numero_adhesion: true,
          statut: true,
          role: true,
          a_paye: true,
          a_soumis_formulaire: true,
          doit_changer_mot_passe: true,
          derniere_connexion: true,
          est_actif: true,
          desactive_le: true,
          desactive_par: true,
          raison_desactivation: true,
          cree_le: true,
          modifie_le: true
        },
        orderBy: { modifie_le: 'desc' },
        skip: offset,
        take: parseInt(limite)
      });

      const totalMembres = await prisma.utilisateur.count({
        where: {
          AND: [conditionsFiltre, conditionsRecherche]
        }
      });

      res.json({
        message: 'Liste des membres r√©cup√©r√©e',
        donnees: {
          membres: membres.map(membre => ({
            ...membre,
            nom_complet: `${membre.prenoms} ${membre.nom}`,
            a_identifiants: !!membre.nom_utilisateur,
            est_actif: membre.est_actif,
            desactive_le: membre.desactive_le,
            desactive_par: membre.desactive_par,
            raison_desactivation: membre.raison_desactivation
          })),
          pagination: {
            page: parseInt(page),
            limite: parseInt(limite),
            total: totalMembres,
            pages_total: Math.ceil(totalMembres / parseInt(limite))
          }
        }
      });

    } catch (error) {
      logger.error('Erreur liste membres:', error);
      res.status(500).json({
        erreur: 'Erreur lors de la r√©cup√©ration de la liste des membres',
        code: 'ERREUR_LISTE_MEMBRES'
      });
    }
  }

  /**
   * Lister tous les formulaires d'adh√©sion soumis
   */
  async listerFormulaires(req, res) {
    try {
      const { page = 1, limite = 20, statut = 'tous', recherche = '' } = req.query;
      const offset = (parseInt(page) - 1) * parseInt(limite);

      // Construire les conditions de filtre par statut
      let conditionsStatut = {};
      switch (statut) {
        case 'en_attente':
          conditionsStatut = { statut: 'EN_ATTENTE' };
          break;
        case 'approuve':
          conditionsStatut = { statut: 'APPROUVE' };
          break;
        case 'rejete':
          conditionsStatut = { statut: 'REJETE' };
          break;
      }

      // Conditions de recherche
      const conditionsRecherche = recherche ? {
        OR: [
          { prenoms: { contains: recherche, mode: 'insensitive' } },
          { nom: { contains: recherche, mode: 'insensitive' } },
          { telephone: { contains: recherche } },
          { email: { contains: recherche, mode: 'insensitive' } },
          { numero_piece_identite: { contains: recherche, mode: 'insensitive' } }
        ]
      } : {};

      // R√©cup√©rer les utilisateurs avec formulaires soumis
      const utilisateurs = await prisma.utilisateur.findMany({
        where: {
          AND: [
            { a_soumis_formulaire: true },
            { role: 'MEMBRE' },
            conditionsStatut,
            conditionsRecherche
          ]
        },
        include: {
          formulaires_adhesion: {
            where: { est_version_active: true }
          }
        },
        orderBy: { modifie_le: 'desc' },
        skip: offset,
        take: parseInt(limite)
      });

      const totalFormulaires = await prisma.utilisateur.count({
        where: {
          AND: [
            { a_soumis_formulaire: true },
            { role: 'MEMBRE' },
            conditionsStatut,
            conditionsRecherche
          ]
        }
      });

      res.json({
        message: 'Liste des formulaires r√©cup√©r√©e',
        donnees: {
          formulaires: utilisateurs.map(user => ({
            // Basic info
            id: user.id,
            numero_adhesion: user.numero_adhesion,
            nom_utilisateur: user.nom_utilisateur,
            prenoms: user.prenoms,
            nom: user.nom,
            nom_complet: `${user.prenoms} ${user.nom}`,
            email: user.email,
            telephone: user.telephone,
            
            // Personal info
            photo_profil_url: user.photo_profil_url,
            date_naissance: user.date_naissance,
            lieu_naissance: user.lieu_naissance,
            adresse: user.adresse,
            profession: user.profession,
            ville_residence: user.ville_residence,
            date_entree_congo: user.date_entree_congo,
            employeur_ecole: user.employeur_ecole,
            
            // Consular card info
            numero_carte_consulaire: user.numero_carte_consulaire,
            date_emission_piece: user.date_emission_piece,
            
            // Photos and signature
            selfie_photo_url: user.selfie_photo_url,
            signature_url: user.signature_url,
            commentaire: user.commentaire,
            
            // Family info
            prenom_conjoint: user.prenom_conjoint,
            nom_conjoint: user.nom_conjoint,
            nombre_enfants: user.nombre_enfants,
            
            // System fields
            role: user.role,
            statut: user.statut,
            code_formulaire: user.code_formulaire,
            url_qr_code: user.url_qr_code,
            carte_emise_le: user.carte_emise_le,
            raison_rejet: user.raison_rejet,
            rejete_le: user.rejete_le,
            rejete_par: user.rejete_par,
            
            // Auth fields
            doit_changer_mot_passe: user.doit_changer_mot_passe,
            a_change_mot_passe_temporaire: user.a_change_mot_passe_temporaire,
            a_paye: user.a_paye,
            a_soumis_formulaire: user.a_soumis_formulaire,
            derniere_connexion: user.derniere_connexion,
            est_actif: user.est_actif,
            desactive_le: user.desactive_le,
            desactive_par: user.desactive_par,
            raison_desactivation: user.raison_desactivation,
            
            // Timestamps
            cree_le: user.cree_le,
            modifie_le: user.modifie_le,
            soumis_le: user.modifie_le, // Alias for backward compatibility
            
            // Form data
            formulaire_actuel: user.formulaires_adhesion[0] || null
          })),
          pagination: {
            page: parseInt(page),
            limite: parseInt(limite),
            total: totalFormulaires,
            pages_total: Math.ceil(totalFormulaires / parseInt(limite))
          }
        }
      });

    } catch (error) {
      logger.error('Erreur liste formulaires:', error);
      res.status(500).json({
        erreur: 'Erreur lors de la r√©cup√©ration des formulaires',
        code: 'ERREUR_LISTE_FORMULAIRES'
      });
    }
  }

  /**
   * Obtenir les d√©tails d'un formulaire d'adh√©sion sp√©cifique pour r√©vision
   */
  async obtenirFormulaireUtilisateur(req, res) {
    try {
      const { id_utilisateur } = req.params;

      if (!id_utilisateur) {
        return res.status(400).json({
          erreur: 'ID utilisateur requis',
          code: 'ID_UTILISATEUR_MANQUANT'
        });
      }

      // R√©cup√©rer l'utilisateur avec son formulaire d'adh√©sion
      const utilisateur = await prisma.utilisateur.findUnique({
        where: { id: parseInt(id_utilisateur) },
        include: {
          formulaires_adhesion: {
            where: { est_version_active: true },
            orderBy: { numero_version: 'desc' },
            take: 1
          }
        }
      });

      if (!utilisateur) {
        return res.status(404).json({
          erreur: 'Utilisateur non trouv√©',
          code: 'UTILISATEUR_NON_TROUVE'
        });
      }

      if (!utilisateur.a_soumis_formulaire) {
        return res.status(404).json({
          erreur: 'Aucun formulaire soumis par cet utilisateur',
          code: 'FORMULAIRE_NON_SOUMIS'
        });
      }

      const formulaireActif = utilisateur.formulaires_adhesion[0];

      // R√©cup√©rer les informations d'audit pour historique des actions
      const historiqueActions = await prisma.journalAudit.findMany({
        where: { id_utilisateur: parseInt(id_utilisateur) },
        orderBy: { cree_le: 'desc' },
        take: 10,
        select: {
          action: true,
          details: true,
          cree_le: true
        }
      });

      // Calculer statistiques pour contexte
      const statistiques = {
        nombre_total_soumissions: await prisma.utilisateur.count({
          where: { a_soumis_formulaire: true }
        }),
        nombre_en_attente: await prisma.utilisateur.count({
          where: { statut: 'EN_ATTENTE' }
        }),
        nombre_approuves: await prisma.utilisateur.count({
          where: { statut: 'APPROUVE' }
        }),
        nombre_rejetes: await prisma.utilisateur.count({
          where: { statut: 'REJETE' }
        })
      };

      logger.info(`Formulaire consult√© par secr√©taire pour utilisateur ${id_utilisateur}`);

      res.json({
        message: 'D√©tails du formulaire d\'adh√©sion r√©cup√©r√©s',
        utilisateur: {
          id: utilisateur.id,
          prenoms: utilisateur.prenoms,
          nom: utilisateur.nom,
          date_naissance: utilisateur.date_naissance,
          lieu_naissance: utilisateur.lieu_naissance,
          adresse: utilisateur.adresse,
          profession: utilisateur.profession,
          ville_residence: utilisateur.ville_residence,
          date_entree_congo: utilisateur.date_entree_congo,
          employeur_ecole: utilisateur.employeur_ecole,
          telephone: utilisateur.telephone,
          numero_carte_consulaire: utilisateur.numero_carte_consulaire,
          date_emission_piece: utilisateur.date_emission_piece,
          prenom_conjoint: utilisateur.prenom_conjoint,
          nom_conjoint: utilisateur.nom_conjoint,
          nombre_enfants: utilisateur.nombre_enfants,
          selfie_photo_url: utilisateur.selfie_photo_url,
          signature_url: utilisateur.signature_url,
          commentaire: utilisateur.commentaire,
          email: utilisateur.email,
          statut: utilisateur.statut,
          numero_adhesion: utilisateur.numero_adhesion,
          code_formulaire: utilisateur.code_formulaire,
          raison_rejet: utilisateur.raison_rejet,
          rejete_le: utilisateur.rejete_le,
          cree_le: utilisateur.cree_le,
          modifie_le: utilisateur.modifie_le
        },
        formulaire: formulaireActif ? {
          id: formulaireActif.id,
          numero_version: formulaireActif.numero_version,
          url_image_formulaire: formulaireActif.url_image_formulaire,
          donnees_snapshot: formulaireActif.donnees_snapshot,
          cree_le: formulaireActif.cree_le
        } : null,
        historique_actions: historiqueActions.map(action => ({
          action: action.action,
          details: action.details,
          date: action.cree_le
        })),
        contexte: {
          peut_approuver: utilisateur.statut === 'EN_ATTENTE',
          peut_rejeter: utilisateur.statut === 'EN_ATTENTE',
          deja_traite: ['APPROUVE', 'REJETE'].includes(utilisateur.statut),
          statut_actuel: utilisateur.statut
        },
        statistiques,
        actions_possibles: utilisateur.statut === 'EN_ATTENTE' ? [
          'Approuver le formulaire',
          'Rejeter le formulaire avec raison',
          'Demander des clarifications'
        ] : [
          'Consulter les d√©tails du traitement',
          'Voir l\'historique des actions'
        ]
      });

    } catch (error) {
      logger.error('Erreur consultation formulaire utilisateur:', error);
      res.status(500).json({
        erreur: 'Erreur lors de la r√©cup√©ration du formulaire',
        code: 'ERREUR_CONSULTATION_FORMULAIRE',
        message: 'Une erreur est survenue lors de la r√©cup√©ration des d√©tails'
      });
    }
  }

  /**
   * Approuver un formulaire d'adh√©sion (avec signature du pr√©sident automatique et cartes de membre)
   */
  async approuverFormulaire(req, res) {
    try {
      const { id_utilisateur, commentaire, url_formulaire_final, carte_recto_url, carte_verso_url } = req.body;
      const idSecretaire = req.utilisateur.id;

      if (!id_utilisateur) {
        return res.status(400).json({
          erreur: 'ID utilisateur requis',
          code: 'DONNEES_MANQUANTES'
        });
      }

      if (!url_formulaire_final) {
        return res.status(400).json({
          erreur: 'URL du formulaire final requis',
          code: 'URL_FORMULAIRE_MANQUANT',
          message: 'Le PDF final avec signatures doit √™tre g√©n√©r√© par le frontend avant approbation'
        });
      }

      // Validate membership card URLs if provided
      if (carte_recto_url || carte_verso_url) {
        if (!carte_recto_url || !carte_verso_url) {
          return res.status(400).json({
            erreur: 'Les deux URLs de carte de membre (recto et verso) sont requises si des cartes sont fournies',
            code: 'CARTES_INCOMPLETES',
            message: 'Fournissez √† la fois carte_recto_url et carte_verso_url'
          });
        }

        // Validate card URLs with schema
        try {
          genererCartesMembreSchema.parse({
            id_utilisateur: id_utilisateur,
            carte_recto_url: carte_recto_url,
            carte_verso_url: carte_verso_url
          });
        } catch (validationError) {
          return res.status(400).json({
            erreur: 'Donn√©es des cartes de membre invalides',
            code: 'VALIDATION_CARTES_ECHOUEE',
            details: validationError.errors || []
          });
        }
      }

      // V√©rifier que l'utilisateur existe et a soumis un formulaire
      const utilisateur = await prisma.utilisateur.findUnique({
        where: { id: id_utilisateur },
        select: { 
          id: true, 
          prenoms: true, 
          nom: true, 
          email: true, // Pour notifications email
          a_soumis_formulaire: true, 
          statut: true,
          code_formulaire: true,
          selfie_photo_url: true, // Pour la r√©g√©n√©ration du PDF
          signature_url: true // Pour inclure la signature du membre
        }
      });

      if (!utilisateur || !utilisateur.a_soumis_formulaire) {
        return res.status(404).json({
          erreur: 'Formulaire non trouv√© ou non soumis',
          code: 'FORMULAIRE_NON_TROUVE'
        });
      }

      if (utilisateur.statut === 'APPROUVE') {
        return res.status(409).json({
          erreur: 'Le formulaire est d√©j√† approuv√©',
          code: 'FORMULAIRE_DEJA_APPROUVE'
        });
      }

      // G√©n√©rer un code de formulaire
      let codeFormulaire = utilisateur.code_formulaire;
      if (!codeFormulaire) {
        const anneeCourante = new Date().getFullYear();
        const nombreApprouves = await prisma.utilisateur.count({
          where: { statut: 'APPROUVE', role: 'MEMBRE' }
        });
        codeFormulaire = `N¬∞${String(nombreApprouves + 1).padStart(3, '0')}/AGCO/M/${anneeCourante}`;
      }

      // G√©n√©rer le num√©ro d'adh√©sion lors de l'approbation
      const compteurApprouves = await prisma.utilisateur.count({
        where: { statut: 'APPROUVE', role: 'MEMBRE' }
      });
      const numeroAdhesion = `N¬∞${String(compteurApprouves + 1).padStart(3, '0')}/AGCO/M/${new Date().getFullYear()}`;

      // R√©cup√©rer la signature active du pr√©sident
      const signaturePresident = await prisma.signature.findFirst({
        where: { est_active: true },
        select: { id: true, url_signature: true }
      });

      // Prepare update data
      const updateData = {
        statut: 'APPROUVE',
        numero_adhesion: numeroAdhesion, // Attribution du num√©ro lors de l'approbation
        code_formulaire: codeFormulaire,
        carte_emise_le: new Date(), // Date d'√©mission de la carte
        modifie_le: new Date()
      };

      // Add membership card URLs if provided
      if (carte_recto_url && carte_verso_url) {
        updateData.carte_recto_url = carte_recto_url;
        updateData.carte_verso_url = carte_verso_url;
        updateData.carte_generee_le = new Date();
        updateData.carte_generee_par = idSecretaire;
      }

      // Approuver et ajouter signature + carte d'adh√©sion
      const utilisateurMisAJour = await prisma.utilisateur.update({
        where: { id: id_utilisateur },
        data: updateData
      });

      // Journal d'audit
      await prisma.journalAudit.create({
        data: {
          id_utilisateur: id_utilisateur,
          action: 'FORMULAIRE_APPROUVE_AVEC_SIGNATURE',
          details: {
            ancien_statut: utilisateur.statut,
            numero_adhesion: numeroAdhesion,
            code_formulaire: codeFormulaire,
            commentaire: commentaire || null,
            signature_president_id: signaturePresident?.id || null,
            traite_par: idSecretaire,
            carte_emise: true,
            cartes_membre_ajoutees: !!(carte_recto_url && carte_verso_url),
            carte_recto_url: carte_recto_url || null,
            carte_verso_url: carte_verso_url || null
          },
          adresse_ip: req.ip,
          agent_utilisateur: req.get('User-Agent')
        }
      });

      logger.info(`Formulaire approuv√© avec signature pour utilisateur ${id_utilisateur} par secr√©taire ${idSecretaire}`);

      // Remplacer le PDF original avec la version finale synchrone du frontend
      try {
        logger.info(`Mise √† jour synchrone du PDF final pour utilisateur ${id_utilisateur}`);
        
        // Mettre √† jour le formulaire d'adh√©sion avec le PDF final fourni par le frontend
        await prisma.formulaireAdhesion.updateMany({
          where: { 
            id_utilisateur: id_utilisateur,
            est_version_active: true
          },
          data: {
            url_image_formulaire: url_formulaire_final,
            est_version_active: true
          }
        });
        
        logger.info(`PDF final synchrone mis √† jour pour utilisateur ${id_utilisateur}`);
      } catch (updateError) {
        logger.warn(`√âchec mise √† jour PDF final synchrone pour utilisateur ${id_utilisateur}`, {
          error: updateError.message,
          utilisateur_id: id_utilisateur
        });
        // L'approbation √©choue si la mise √† jour PDF √©choue
        throw updateError;
      }

      // Envoyer notification email si l'utilisateur a un email
      let notificationEmail = { success: false, error: 'Aucun email' };
      if (utilisateur.email) {
        try {
          notificationEmail = await emailService.notifierFormulaireApprouve(
            utilisateur, 
            codeFormulaire, 
            commentaire
          );
          
          if (notificationEmail.success) {
            logger.info(`Email d'approbation envoy√© √† ${utilisateur.email} pour utilisateur ${id_utilisateur}`);
          } else {
            logger.warn(`√âchec envoi email d'approbation pour utilisateur ${id_utilisateur}:`, notificationEmail.error);
          }
        } catch (error) {
          logger.error(`Erreur lors de l'envoi d'email d'approbation pour utilisateur ${id_utilisateur}:`, error);
        }
      }

      res.json({
        message: 'Formulaire approuv√© avec succ√®s',
        utilisateur: {
          id: utilisateurMisAJour.id,
          nom_complet: `${utilisateurMisAJour.prenoms} ${utilisateurMisAJour.nom}`,
          statut: utilisateurMisAJour.statut,
          numero_adhesion: utilisateurMisAJour.numero_adhesion,
          code_formulaire: utilisateurMisAJour.code_formulaire,
          carte_emise_le: utilisateurMisAJour.carte_emise_le
        },
        actions_effectuees: [
          '‚úÖ Formulaire approuv√©',
          `üî¢ Num√©ro d'adh√©sion attribu√©: ${numeroAdhesion}`,
          'üè∑Ô∏è Code de formulaire g√©n√©r√©',
          '‚úçÔ∏è Signature du pr√©sident ajout√©e',
          'üé´ Carte d\'adh√©sion √©mise',
          ...(carte_recto_url && carte_verso_url ? ['üé¥ Cartes de membre (recto/verso) ajout√©es'] : []),
          ...(notificationEmail.success ? ['üìß Email de confirmation envoy√©'] : [])
        ],
        cartes_membre: carte_recto_url && carte_verso_url ? {
          recto_url: carte_recto_url,
          verso_url: carte_verso_url,
          generee_le: new Date(),
          generee_par: idSecretaire
        } : null,
        signature_president: signaturePresident ? {
          appliquee: true,
          url: signaturePresident.url_signature
        } : {
          appliquee: false,
          message: 'Aucune signature de pr√©sident active trouv√©e'
        },
        notification_email: {
          envoye: notificationEmail.success,
          destinataire: utilisateur.email || null,
          erreur: notificationEmail.success ? null : notificationEmail.error
        }
      });

    } catch (error) {
      logger.error('Erreur approbation formulaire:', error);
      res.status(500).json({
        erreur: 'Erreur lors de l\'approbation du formulaire',
        code: 'ERREUR_APPROBATION_FORMULAIRE'
      });
    }
  }

  /**
   * Rejeter un formulaire d'adh√©sion
   */
  async rejeterFormulaire(req, res) {
    try {
      const { id_utilisateur, raison, categorie_rejet, suggestions } = req.body;
      const idSecretaire = req.utilisateur.id;

      if (!id_utilisateur || !raison) {
        return res.status(400).json({
          erreur: 'ID utilisateur et raison du rejet requis',
          code: 'DONNEES_MANQUANTES'
        });
      }

      // Cat√©gories de rejet pr√©d√©finies
      const categoriesValides = [
        'DOCUMENTS_ILLISIBLES',
        'INFORMATIONS_INCORRECTES', 
        'DOCUMENTS_MANQUANTS',
        'PHOTO_INADEQUATE',
        'SIGNATURE_MANQUANTE',
        'AUTRE'
      ];

      const categorieRejet = categorie_rejet && categoriesValides.includes(categorie_rejet) 
        ? categorie_rejet 
        : 'AUTRE';

      const utilisateur = await prisma.utilisateur.findUnique({
        where: { id: id_utilisateur },
        select: { 
          id: true, 
          prenoms: true, 
          nom: true, 
          email: true, // Pour notifications email
          a_soumis_formulaire: true, 
          statut: true 
        }
      });

      if (!utilisateur || !utilisateur.a_soumis_formulaire) {
        return res.status(404).json({
          erreur: 'Formulaire non trouv√© ou non soumis',
          code: 'FORMULAIRE_NON_TROUVE'
        });
      }

      // Rejeter le formulaire
      const utilisateurMisAJour = await prisma.utilisateur.update({
        where: { id: id_utilisateur },
        data: {
          statut: 'REJETE',
          raison_rejet: raison,
          rejete_le: new Date(),
          rejete_par: idSecretaire,
          modifie_le: new Date()
        }
      });

      // Journal d'audit
      await prisma.journalAudit.create({
        data: {
          id_utilisateur: id_utilisateur,
          action: 'FORMULAIRE_REJETE',
          details: {
            ancien_statut: utilisateur.statut,
            raison_rejet: raison,
            categorie_rejet: categorieRejet,
            suggestions: suggestions || null,
            traite_par: idSecretaire,
            date_rejet: new Date().toISOString()
          },
          adresse_ip: req.ip,
          agent_utilisateur: req.get('User-Agent')
        }
      });

      logger.info(`Formulaire rejet√© pour utilisateur ${id_utilisateur} par secr√©taire ${idSecretaire}`);

      // Envoyer notification email si l'utilisateur a un email
      let notificationEmail = { success: false, error: 'Aucun email' };
      if (utilisateur.email) {
        try {
          // Cr√©er l'objet de donn√©es de rejet structur√© pour l'email
          const donneesRejet = {
            raison_principale: raison,
            categorie: categorieRejet,
            suggestions: suggestions || [],
            date_rejet: new Date().toLocaleDateString('fr-FR')
          };
          
          notificationEmail = await emailService.notifierFormulaireRejete(utilisateur, donneesRejet);
          
          if (notificationEmail.success) {
            logger.info(`Email de rejet envoy√© √† ${utilisateur.email} pour utilisateur ${id_utilisateur}`);
          } else {
            logger.warn(`√âchec envoi email de rejet pour utilisateur ${id_utilisateur}:`, notificationEmail.error);
          }
        } catch (error) {
          logger.error(`Erreur lors de l'envoi d'email de rejet pour utilisateur ${id_utilisateur}:`, error);
        }
      }

      res.json({
        message: 'Formulaire rejet√©',
        utilisateur: {
          id: utilisateurMisAJour.id,
          nom_complet: `${utilisateurMisAJour.prenoms} ${utilisateurMisAJour.nom}`,
          statut: utilisateurMisAJour.statut
        },
        rejet: {
          raison_principale: raison,
          categorie: categorieRejet,
          suggestions: suggestions || [],
          date_rejet: new Date().toLocaleDateString('fr-FR')
        },
        actions_effectuees: [
          '‚ùå Formulaire rejet√© avec d√©tails structur√©s',
          `üìÇ Cat√©gorie: ${categorieRejet}`,
          ...(suggestions && suggestions.length > 0 ? [`üí° ${suggestions.length} suggestion(s) fournie(s)`] : []),
          ...(notificationEmail.success ? ['üìß Email d√©taill√© envoy√© au membre'] : [])
        ],
        notification_email: {
          envoye: notificationEmail.success,
          destinataire: utilisateur.email || null,
          erreur: notificationEmail.success ? null : notificationEmail.error
        }
      });

    } catch (error) {
      logger.error('Erreur rejet formulaire:', error);
      res.status(500).json({
        erreur: 'Erreur lors du rejet du formulaire',
        code: 'ERREUR_REJET_FORMULAIRE'
      });
    }
  }

  /**
   * Supprimer un formulaire d'adh√©sion (permet √† l'utilisateur de soumettre √† nouveau)
   */
  async supprimerFormulaire(req, res) {
    try {
      const { id_utilisateur, raison } = req.body;
      const idSecretaire = req.utilisateur.id;

      if (!id_utilisateur) {
        return res.status(400).json({
          erreur: 'ID utilisateur requis',
          code: 'ID_UTILISATEUR_MANQUANT'
        });
      }

      const utilisateur = await prisma.utilisateur.findUnique({
        where: { id: id_utilisateur },
        select: { id: true, prenoms: true, nom: true, a_soumis_formulaire: true }
      });

      if (!utilisateur || !utilisateur.a_soumis_formulaire) {
        return res.status(404).json({
          erreur: 'Formulaire non trouv√©',
          code: 'FORMULAIRE_NON_TROUVE'
        });
      }

      // R√©initialiser le formulaire - permet √† l'utilisateur de soumettre √† nouveau
      await prisma.utilisateur.update({
        where: { id: id_utilisateur },
        data: {
          a_soumis_formulaire: false,
          statut: 'EN_ATTENTE',
          code_formulaire: null,
          carte_emise_le: null,
          modifie_le: new Date()
        }
      });

      // D√©sactiver les versions de formulaire existantes
      await prisma.formulaireAdhesion.updateMany({
        where: { id_utilisateur: id_utilisateur },
        data: { est_version_active: false }
      });

      // Journal d'audit
      await prisma.journalAudit.create({
        data: {
          id_utilisateur: id_utilisateur,
          action: 'FORMULAIRE_SUPPRIME',
          details: {
            raison: raison || 'Aucune raison fournie',
            supprime_par: idSecretaire
          },
          adresse_ip: req.ip,
          agent_utilisateur: req.get('User-Agent')
        }
      });

      logger.info(`Formulaire supprim√© pour utilisateur ${id_utilisateur} par secr√©taire ${idSecretaire}`);

      res.json({
        message: 'Formulaire supprim√© avec succ√®s',
        action: 'L\'utilisateur peut maintenant soumettre un nouveau formulaire'
      });

    } catch (error) {
      logger.error('Erreur suppression formulaire:', error);
      res.status(500).json({
        erreur: 'Erreur lors de la suppression du formulaire',
        code: 'ERREUR_SUPPRESSION_FORMULAIRE'
      });
    }
  }

  /**
   * Modifier un formulaire d'adh√©sion
   */
  async modifierFormulaire(req, res) {
    try {
      const idSecretaire = req.utilisateur.id;
      const { id_utilisateur, modifications } = req.body;

      if (!id_utilisateur || !modifications) {
        return res.status(400).json({
          erreur: 'ID utilisateur et modifications requis',
          code: 'DONNEES_MANQUANTES'
        });
      }

      // V√©rifier que l'utilisateur existe et a soumis un formulaire
      const utilisateur = await prisma.utilisateur.findUnique({
        where: { id: id_utilisateur }
      });

      if (!utilisateur || !utilisateur.a_soumis_formulaire) {
        return res.status(404).json({
          erreur: 'Utilisateur ou formulaire non trouv√©',
          code: 'UTILISATEUR_FORMULAIRE_INTROUVABLE'
        });
      }

      // Construire l'objet de mise √† jour avec les modifications autoris√©es
      const donneesModification = {};
      const champsAutorises = [
        'prenoms', 'nom', 'telephone', 'email', 'adresse', 'profession',
        'ville_residence', 'employeur_ecole', 'prenom_conjoint', 'nom_conjoint',
        'nombre_enfants', 'signature_membre_url'
      ];

      for (const champ of champsAutorises) {
        if (modifications.hasOwnProperty(champ)) {
          donneesModification[champ] = modifications[champ];
        }
      }

      // Mettre √† jour l'utilisateur
      const utilisateurModifie = await prisma.utilisateur.update({
        where: { id: id_utilisateur },
        data: donneesModification
      });

      // Cr√©er un journal d'audit
      await prisma.journalAudit.create({
        data: {
          id_utilisateur: idSecretaire,
          action: 'MODIFIER_FORMULAIRE',
          details: {
            utilisateur_modifie: id_utilisateur,
            nom_complet: `${utilisateur.prenoms} ${utilisateur.nom}`,
            modifications: donneesModification
          },
          adresse_ip: req.ip,
          agent_utilisateur: req.get('User-Agent')
        }
      });

      logger.info(`Formulaire modifi√© pour utilisateur ${id_utilisateur} par secr√©taire ${idSecretaire}`, {
        modifications: donneesModification
      });

      res.json({
        message: 'Formulaire modifi√© avec succ√®s',
        utilisateur: {
          id: utilisateurModifie.id,
          nom_complet: `${utilisateurModifie.prenoms} ${utilisateurModifie.nom}`,
          statut: utilisateurModifie.statut
        }
      });

    } catch (error) {
      logger.error('Erreur modification formulaire:', error);
      res.status(500).json({
        erreur: 'Erreur lors de la modification du formulaire',
        code: 'ERREUR_MODIFICATION_FORMULAIRE'
      });
    }
  }

  /**
   * R√©cup√©rer tous les formulaires approuv√©s
   */
  async obtenirFormulairesApprouves(req, res) {
    try {
      const { page = 1, limite = 20 } = req.query;
      const offset = (parseInt(page) - 1) * parseInt(limite);

      const formulaires = await prisma.utilisateur.findMany({
        where: {
          statut: 'APPROUVE',
          a_soumis_formulaire: true
        },
        select: {
          id: true,
          numero_adhesion: true,
          prenoms: true,
          nom: true,
          telephone: true,
          email: true,
          code_formulaire: true,
          carte_emise_le: true,
          photo_profil_url: true,
          signature_membre_url: true,
          cree_le: true,
          modifie_le: true
        },
        orderBy: {
          carte_emise_le: 'desc'
        },
        skip: offset,
        take: parseInt(limite)
      });

      const total = await prisma.utilisateur.count({
        where: {
          statut: 'APPROUVE',
          a_soumis_formulaire: true
        }
      });

      // Formater les dates
            const formulairesFormates = formulaires.map(formulaire => ({
        ...formulaire,
        carte_emise_le: formulaire.carte_emise_le ? new Date(formulaire.carte_emise_le) : null,
        date_creation: new Date(formulaire.cree_le),
        derniere_modification: new Date(formulaire.modifie_le)
      }));

      res.json({
        formulaires: formulairesFormates,
        pagination: {
          page: parseInt(page),
          limite: parseInt(limite),
          total,
          pages_total: Math.ceil(total / parseInt(limite))
        }
      });

    } catch (error) {
      logger.error('Erreur r√©cup√©ration formulaires approuv√©s:', error);
      res.status(500).json({
        erreur: 'Erreur lors de la r√©cup√©ration des formulaires approuv√©s',
        code: 'ERREUR_FORMULAIRES_APPROUVES'
      });
    }
  }

  /**
   * Lister tous les membres approuv√©s
   */
  async listerMembresApprouves(req, res) {
    try {
      const { page = 1, limite = 50, recherche } = req.query;
      const offset = (parseInt(page) - 1) * parseInt(limite);

      let whereClause = {
        statut: 'APPROUVE',
        est_actif: true
      };

      // Ajouter filtrage par recherche si fourni
      if (recherche) {
        whereClause.OR = [
          { prenoms: { contains: recherche, mode: 'insensitive' } },
          { nom: { contains: recherche, mode: 'insensitive' } },
          { numero_adhesion: { contains: recherche, mode: 'insensitive' } },
          { code_formulaire: { contains: recherche, mode: 'insensitive' } }
        ];
      }

      const membres = await prisma.utilisateur.findMany({
        where: whereClause,
        select: {
          id: true,
          numero_adhesion: true,
          prenoms: true,
          nom: true,
          telephone: true,
          email: true,
          code_formulaire: true,
          photo_profil_url: true,
          carte_emise_le: true,
          derniere_connexion: true,
          nom_utilisateur: true,
          est_actif: true,
          desactive_le: true,
          desactive_par: true,
          raison_desactivation: true
        },
        orderBy: {
          nom: 'asc'
        },
        skip: offset,
        take: parseInt(limite)
      });

      const total = await prisma.utilisateur.count({
        where: whereClause
      });

      // Formater les dates
            const membresFormates = membres.map(membre => ({
        ...membre,
        nom_complet: `${membre.prenoms} ${membre.nom}`,
        carte_emise_le: membre.carte_emise_le ? new Date(membre.carte_emise_le) : null,
        derniere_connexion: membre.derniere_connexion ? new Date(membre.derniere_connexion) : 'Jamais connect√©'
      }));

      res.json({
        membres: membresFormates,
        pagination: {
          page: parseInt(page),
          limite: parseInt(limite),
          total,
          pages_total: Math.ceil(total / parseInt(limite))
        }
      });

    } catch (error) {
      logger.error('Erreur listing membres approuv√©s:', error);
      res.status(500).json({
        erreur: 'Erreur lors du listing des membres approuv√©s',
        code: 'ERREUR_LISTING_MEMBRES'
      });
    }
  }

  /**
   * Lister toutes les cartes de membres
   */
  async listerCartesMembres(req, res) {
    try {
      const { page = 1, limite = 20 } = req.query;
      const offset = (parseInt(page) - 1) * parseInt(limite);

      const cartes = await prisma.utilisateur.findMany({
        where: {
          statut: 'APPROUVE',
          carte_emise_le: {
            not: null
          },
          est_actif: true
        },
        select: {
          id: true,
          numero_adhesion: true,
          prenoms: true,
          nom: true,
          code_formulaire: true,
          url_qr_code: true,
          carte_emise_le: true,
          photo_profil_url: true,
          carte_recto_url: true,
          carte_verso_url: true,
          carte_generee_le: true,
          carte_generee_par: true
        },
        orderBy: {
          carte_emise_le: 'desc'
        },
        skip: offset,
        take: parseInt(limite)
      });

      const total = await prisma.utilisateur.count({
        where: {
          statut: 'APPROUVE',
          carte_emise_le: {
            not: null
          },
          est_actif: true
        }
      });

      // R√©cup√©rer la signature du pr√©sident active
      const signaturePresident = await prisma.signature.findFirst({
        where: { est_active: true },
        include: {
          utilisateur: {
            select: {
              prenoms: true,
              nom: true
            }
          }
        }
      });

      // Formater les cartes
            const cartesFormatees = cartes.map(carte => ({
        id: carte.id,
        numero_adhesion: carte.numero_adhesion,
        nom_complet: `${carte.prenoms} ${carte.nom}`,
        code_formulaire: carte.code_formulaire,
        url_qr_code: carte.url_qr_code,
        photo_profil_url: carte.photo_profil_url,
        date_emission: new Date(carte.carte_emise_le),
        signature_presidente_url: signaturePresident?.url_signature || null,
        nom_presidente: signaturePresident ? `${signaturePresident.utilisateur.prenoms} ${signaturePresident.utilisateur.nom}` : null,
        // Membership card images from Cloudinary
        carte_membre: {
          recto_url: carte.carte_recto_url,
          verso_url: carte.carte_verso_url,
          generee_le: carte.carte_generee_le,
          generee_par: carte.carte_generee_par
        }
      }));

      res.json({
        cartes: cartesFormatees,
        pagination: {
          page: parseInt(page),
          limite: parseInt(limite),
          total,
          pages_total: Math.ceil(total / parseInt(limite))
        }
      });

    } catch (error) {
      logger.error('Erreur listing cartes membres:', error);
      res.status(500).json({
        erreur: 'Erreur lors du listing des cartes de membres',
        code: 'ERREUR_LISTING_CARTES'
      });
    }
  }

  /**
   * D√©sactiver un utilisateur
   */
  async desactiverUtilisateur(req, res) {
    try {
      const idSecretaire = req.utilisateur.id;
      const { id_utilisateur, raison } = req.body;

      if (!id_utilisateur || !raison) {
        return res.status(400).json({
          erreur: 'ID utilisateur et raison requis',
          code: 'DONNEES_MANQUANTES'
        });
      }

      // V√©rifier que l'utilisateur existe et est actif
      const utilisateur = await prisma.utilisateur.findUnique({
        where: { id: id_utilisateur }
      });

      if (!utilisateur) {
        return res.status(404).json({
          erreur: 'Utilisateur non trouv√©',
          code: 'UTILISATEUR_INTROUVABLE'
        });
      }

      if (!utilisateur.est_actif) {
        return res.status(400).json({
          erreur: 'L\'utilisateur est d√©j√† d√©sactiv√©',
          code: 'UTILISATEUR_DEJA_DESACTIVE'
        });
      }

      // Emp√™cher la d√©sactivation d'un secr√©taire ou pr√©sident
      if (utilisateur.role !== 'MEMBRE') {
        return res.status(403).json({
          erreur: 'Impossible de d√©sactiver un secr√©taire ou pr√©sident',
          code: 'DESACTIVATION_INTERDITE'
        });
      }

      // D√©sactiver l'utilisateur
      const utilisateurDesactive = await prisma.utilisateur.update({
        where: { id: id_utilisateur },
        data: {
          est_actif: false,
          desactive_le: new Date(),
          desactive_par: idSecretaire,
          raison_desactivation: raison
        }
      });

      // Cr√©er un journal d'audit
      await prisma.journalAudit.create({
        data: {
          id_utilisateur: idSecretaire,
          action: 'DESACTIVER_UTILISATEUR',
          details: {
            utilisateur_desactive: id_utilisateur,
            nom_complet: `${utilisateur.prenoms} ${utilisateur.nom}`,
            raison
          },
          adresse_ip: req.ip,
          agent_utilisateur: req.get('User-Agent')
        }
      });

      logger.info(`Utilisateur ${id_utilisateur} d√©sactiv√© par secr√©taire ${idSecretaire}`, {
        nom_utilisateur: utilisateur.nom_utilisateur,
        raison
      });

      // Envoyer notification email si l'utilisateur a un email
      let notificationEmail = { success: false, error: 'Aucun email' };
      if (utilisateur.email) {
        try {
          notificationEmail = await emailService.notifierDesactivationCompte(utilisateur, raison);
          
          if (notificationEmail.success) {
            logger.info(`Email de d√©sactivation envoy√© √† ${utilisateur.email} pour utilisateur ${id_utilisateur}`);
          } else {
            logger.warn(`√âchec envoi email de d√©sactivation pour utilisateur ${id_utilisateur}:`, notificationEmail.error);
          }
        } catch (error) {
          logger.error(`Erreur lors de l'envoi d'email de d√©sactivation pour utilisateur ${id_utilisateur}:`, error);
        }
      }

      res.json({
        message: 'Utilisateur d√©sactiv√© avec succ√®s',
        utilisateur: {
          id: utilisateurDesactive.id,
          nom_complet: `${utilisateurDesactive.prenoms} ${utilisateurDesactive.nom}`,
          desactive_le: new Date(utilisateurDesactive.desactive_le),
          raison_desactivation: utilisateurDesactive.raison_desactivation
        },
        actions_effectuees: [
          'üîí Compte utilisateur d√©sactiv√©',
          ...(notificationEmail.success ? ['üìß Email de notification envoy√©'] : [])
        ],
        notification_email: {
          envoye: notificationEmail.success,
          destinataire: utilisateur.email || null,
          erreur: notificationEmail.success ? null : notificationEmail.error
        }
      });

    } catch (error) {
      logger.error('Erreur d√©sactivation utilisateur:', error);
      res.status(500).json({
        erreur: 'Erreur lors de la d√©sactivation de l\'utilisateur',
        code: 'ERREUR_DESACTIVATION_UTILISATEUR'
      });
    }
  }

  /**
   * Lister les nouveaux utilisateurs cr√©√©s avec leurs identifiants temporaires (SG/Pr√©sident uniquement)
   */
  async listerNouveauxUtilisateursAvecCredits(req, res) {
    try {
      // V√©rification de s√©curit√© stricte : Seuls SG et Pr√©sident peuvent acc√©der
      if (req.utilisateur.role !== 'SECRETAIRE_GENERALE' && req.utilisateur.role !== 'PRESIDENT') {
        logger.warn(`Tentative d'acc√®s non autoris√© aux mots de passe temporaires par ${req.utilisateur.nom_utilisateur} (${req.utilisateur.role})`, {
          utilisateur_id: req.utilisateur.id,
          ip: req.ip,
          user_agent: req.get('User-Agent')
        });
        
        return res.status(403).json({
          erreur: 'Acc√®s strictement limit√© aux Secr√©taire G√©n√©ral et Pr√©sident',
          code: 'ACCES_INTERDIT_CREDENTIALS'
        });
      }

      const { page = 1, limite = 20, inclure_mot_passe_change = false } = req.query;
      const offset = (parseInt(page) - 1) * parseInt(limite);

      // Construire les conditions - par d√©faut, exclure ceux qui ont chang√© leur mot de passe
      const conditionsBase = {
        role: 'MEMBRE',
        NOT: { nom_utilisateur: null }, // Ont des identifiants
        NOT: { mot_passe_temporaire: null } // Ont encore un mot de passe temporaire stock√©
      };

      // Si inclure_mot_passe_change est false (d√©faut), on exclut ceux qui ont d√©j√† chang√©
      if (inclure_mot_passe_change !== 'true') {
        conditionsBase.doit_changer_mot_passe = true; // Seulement ceux qui n'ont pas encore chang√©
      }

      // R√©cup√©rer les nouveaux utilisateurs avec mots de passe temporaires
      const [utilisateurs, total] = await Promise.all([
        prisma.utilisateur.findMany({
          where: conditionsBase,
          select: {
            id: true,
            prenoms: true,
            nom: true,
            nom_utilisateur: true,
            mot_passe_temporaire: true, // SENSIBLE - seulement pour SG/Pr√©sident
            telephone: true,
            statut: true,
            doit_changer_mot_passe: true,
            a_soumis_formulaire: true,
            derniere_connexion: true,
            cree_le: true,
            modifie_le: true
          },
          orderBy: { cree_le: 'desc' },
          skip: offset,
          take: parseInt(limite)
        }),
        prisma.utilisateur.count({ where: conditionsBase })
      ]);

      // Journal d'audit pour tra√ßabilit√©
      await prisma.journalAudit.create({
        data: {
          id_utilisateur: req.utilisateur.id,
          action: 'CONSULTATION_CREDENTIALS_TEMPORAIRES',
          details: {
            nombre_utilisateurs: utilisateurs.length,
            consulte_par_role: req.utilisateur.role,
            inclure_mot_passe_change: inclure_mot_passe_change === 'true'
          },
          adresse_ip: req.ip,
          agent_utilisateur: req.get('User-Agent')
        }
      });

      res.json({
        message: 'Liste des nouveaux utilisateurs avec identifiants temporaires',
        donnees: {
          utilisateurs: utilisateurs.map(utilisateur => ({
            id: utilisateur.id,
            nom_complet: `${utilisateur.prenoms} ${utilisateur.nom}`,
            nom_utilisateur: utilisateur.nom_utilisateur,
            mot_passe_temporaire: utilisateur.mot_passe_temporaire, // SENSIBLE
            telephone: utilisateur.telephone,
            statut: utilisateur.statut,
            doit_changer_mot_passe: utilisateur.doit_changer_mot_passe,
            a_soumis_formulaire: utilisateur.a_soumis_formulaire,
            derniere_connexion: utilisateur.derniere_connexion,
            date_creation: utilisateur.cree_le,
            derniere_modification: utilisateur.modifie_le,
            statut_connexion: utilisateur.derniere_connexion ? 'connecte' : 'jamais_connecte'
          })),
          pagination: {
            page: parseInt(page),
            limite: parseInt(limite),
            total,
            pages_total: Math.ceil(total / parseInt(limite))
          },
          avertissement_securite: 'Ces mots de passe sont sensibles et ne doivent √™tre partag√©s qu\'avec les membres concern√©s'
        }
      });

    } catch (error) {
      logger.error('Erreur consultation identifiants temporaires:', {
        utilisateur_id: req.utilisateur.id,
        error: error.message,
        stack: error.stack
      });
      
      res.status(500).json({
        erreur: 'Erreur lors de la r√©cup√©ration des identifiants temporaires',
        code: 'ERREUR_CONSULTATION_CREDENTIALS'
      });
    }
  }

  /**
   * Supprimer le mot de passe temporaire d'un utilisateur (SG/Pr√©sident uniquement)
   */
  async supprimerMotPasseTemporaire(req, res) {
    try {
      // V√©rification de s√©curit√© stricte : Seuls SG et Pr√©sident peuvent acc√©der
      if (req.utilisateur.role !== 'SECRETAIRE_GENERALE' && req.utilisateur.role !== 'PRESIDENT') {
        logger.warn(`Tentative de suppression non autoris√©e de mot de passe temporaire par ${req.utilisateur.nom_utilisateur} (${req.utilisateur.role})`, {
          utilisateur_id: req.utilisateur.id,
          ip: req.ip,
          user_agent: req.get('User-Agent')
        });
        
        return res.status(403).json({
          erreur: 'Acc√®s strictement limit√© aux Secr√©taire G√©n√©ral et Pr√©sident',
          code: 'ACCES_INTERDIT_SUPPRESSION_CREDENTIALS'
        });
      }

      const { id_utilisateur } = req.body;

      if (!id_utilisateur || !Number.isInteger(id_utilisateur)) {
        return res.status(400).json({
          erreur: 'ID utilisateur requis et doit √™tre un entier',
          code: 'ID_UTILISATEUR_INVALIDE'
        });
      }

      // V√©rifier que l'utilisateur existe et a un mot de passe temporaire
      const utilisateur = await prisma.utilisateur.findUnique({
        where: { id: id_utilisateur },
        select: {
          id: true,
          prenoms: true,
          nom: true,
          nom_utilisateur: true,
          mot_passe_temporaire: true,
          role: true
        }
      });

      if (!utilisateur) {
        return res.status(404).json({
          erreur: 'Utilisateur non trouv√©',
          code: 'UTILISATEUR_NON_TROUVE'
        });
      }

      if (!utilisateur.mot_passe_temporaire) {
        return res.status(409).json({
          erreur: 'Aucun mot de passe temporaire √† supprimer pour cet utilisateur',
          code: 'AUCUN_MOT_PASSE_TEMPORAIRE'
        });
      }

      // Emp√™cher la suppression du mot de passe temporaire d'un admin
      if (utilisateur.role !== 'MEMBRE') {
        return res.status(403).json({
          erreur: 'Impossible de supprimer le mot de passe temporaire d\'un administrateur',
          code: 'SUPPRESSION_ADMIN_INTERDITE'
        });
      }

      // Supprimer le mot de passe temporaire
      await prisma.utilisateur.update({
        where: { id: id_utilisateur },
        data: {
          mot_passe_temporaire: null
        }
      });

      // Journal d'audit pour tra√ßabilit√© compl√®te
      await prisma.journalAudit.create({
        data: {
          id_utilisateur: req.utilisateur.id,
          action: 'SUPPRESSION_MOT_PASSE_TEMPORAIRE',
          details: {
            utilisateur_cible: id_utilisateur,
            nom_complet_cible: `${utilisateur.prenoms} ${utilisateur.nom}`,
            nom_utilisateur_cible: utilisateur.nom_utilisateur,
            supprime_par_role: req.utilisateur.role
          },
          adresse_ip: req.ip,
          agent_utilisateur: req.get('User-Agent')
        }
      });

      logger.info(`Mot de passe temporaire supprim√© pour utilisateur ${id_utilisateur} par ${req.utilisateur.role} ${req.utilisateur.nom_utilisateur}`, {
        utilisateur_cible: id_utilisateur,
        supprime_par: req.utilisateur.id
      });

      res.json({
        message: 'Mot de passe temporaire supprim√© avec succ√®s',
        utilisateur: {
          id: utilisateur.id,
          nom_complet: `${utilisateur.prenoms} ${utilisateur.nom}`,
          nom_utilisateur: utilisateur.nom_utilisateur
        },
        action: 'Le mot de passe temporaire n\'est plus visible dans l\'interface'
      });

    } catch (error) {
      logger.error('Erreur suppression mot de passe temporaire:', {
        utilisateur_id: req.utilisateur.id,
        error: error.message,
        stack: error.stack
      });
      
      res.status(500).json({
        erreur: 'Erreur lors de la suppression du mot de passe temporaire',
        code: 'ERREUR_SUPPRESSION_CREDENTIALS'
      });
    }
  }

  /**
   * Mettre √† jour la signature du pr√©sident
   */
  async mettreAJourSignature(req, res) {
    try {
      const idSecretaire = req.utilisateur.id;
      const { url_signature, cloudinary_id } = req.body;

      if (!url_signature || !cloudinary_id) {
        return res.status(400).json({
          erreur: 'URL signature et ID Cloudinary requis',
          code: 'DONNEES_MANQUANTES'
        });
      }

      // Trouver le pr√©sident
      const president = await prisma.utilisateur.findFirst({
        where: { role: 'PRESIDENT' },
        select: { id: true, prenoms: true, nom: true }
      });

      if (!president) {
        return res.status(404).json({
          type: 'resource_not_found',
          message: 'Aucun pr√©sident trouv√© dans le syst√®me',
          code: 'PRESIDENT_NOT_FOUND',
          timestamp: new Date().toISOString(),
          suggestions: [
            'Cr√©ez d\'abord un compte avec le r√¥le PRESIDENT',
            'V√©rifiez que l\'utilisateur pr√©sident existe'
          ]
        });
      }

      // D√©sactiver l'ancienne signature
      await prisma.signature.updateMany({
        where: { est_active: true },
        data: { est_active: false }
      });

      // Cr√©er la nouvelle signature avec l'ID du vrai pr√©sident
      const nouvelleSignature = await prisma.signature.create({
        data: {
          id_president: president.id, // Utiliser l'ID du vrai pr√©sident
          url_signature,
          cloudinary_id,
          est_active: true
        }
      });

      // Cr√©er un journal d'audit
      await prisma.journalAudit.create({
        data: {
          id_utilisateur: idSecretaire,
          action: 'METTRE_A_JOUR_SIGNATURE',
          details: {
            president_id: president.id,
            president_nom: `${president.prenoms} ${president.nom}`,
            nouvelle_signature: url_signature,
            gere_par: idSecretaire
          },
          adresse_ip: req.ip,
          agent_utilisateur: req.get('User-Agent')
        }
      });

      logger.info(`Signature mise √† jour par secr√©taire ${idSecretaire} pour pr√©sident ${president.id}`, {
        signature_id: nouvelleSignature.id,
        url: url_signature,
        president: `${president.prenoms} ${president.nom}`
      });

      res.json({
        message: 'Signature mise √† jour avec succ√®s',
        signature: {
          id: nouvelleSignature.id,
          url_signature: nouvelleSignature.url_signature,
          date_upload: new Date(nouvelleSignature.telecharge_le),
          president: `${president.prenoms} ${president.nom}`
        }
      });

    } catch (error) {
      const context = {
        operation: 'update_president_signature',
        user_id: req.utilisateur?.id
      };
      return ErrorHandler.handleError(error, res, context);
    }
  }

  /**
   * Lister les formulaires personnels des administrateurs
   */
  async listerFormulairesAdmin(req, res) {
    try {
      const { page = 1, limite = 20, filtre = 'tous', recherche = '' } = req.query;
      const offset = (parseInt(page) - 1) * parseInt(limite);

      // Conditions de filtrage par statut utilisateur
      let conditionsFiltre = {};
      if (filtre === 'en_attente') {
        conditionsFiltre.utilisateur = { statut: 'EN_ATTENTE' };
      } else if (filtre === 'approuves') {
        conditionsFiltre.utilisateur = { statut: 'APPROUVE' };
      } else if (filtre === 'rejetes') {
        conditionsFiltre.utilisateur = { statut: 'REJETE' };
      }

      // Conditions de recherche dans les champs utilisateur
      let conditionsRecherche = {};
      if (recherche) {
        conditionsRecherche.utilisateur = {
          OR: [
            { prenoms: { contains: recherche, mode: 'insensitive' } },
            { nom: { contains: recherche, mode: 'insensitive' } },
            { nom_utilisateur: { contains: recherche, mode: 'insensitive' } }
          ]
        };
      }

      // R√©cup√©rer les formulaires d'administrateurs
      const formulairesAdmin = await prisma.formulaireAdhesion.findMany({
        where: {
          AND: [
            {
              utilisateur: {
                role: { in: ['PRESIDENT', 'SECRETAIRE_GENERALE'] }
              }
            },
            conditionsFiltre,
            conditionsRecherche
          ]
        },
        include: {
          utilisateur: {
            select: {
              id: true,
              prenoms: true,
              nom: true,
              nom_utilisateur: true,
              role: true,
              email: true,
              telephone: true,
              numero_adhesion: true,
              statut: true,
              photo_profil_url: true,
              selfie_photo_url: true,
              signature_url: true,
              raison_rejet: true,
              rejete_le: true,
              rejete_par: true
            }
          }
        },
        orderBy: {
          cree_le: 'desc'
        },
        skip: offset,
        take: parseInt(limite)
      });

      // Compter le total
      const totalFormulaires = await prisma.formulaireAdhesion.count({
        where: {
          AND: [
            {
              utilisateur: {
                role: { in: ['PRESIDENT', 'SECRETAIRE_GENERALE'] }
              }
            },
            conditionsFiltre,
            conditionsRecherche
          ]
        }
      });

      res.json({
        message: 'Liste des formulaires administrateurs r√©cup√©r√©e',
        donnees: {
          formulaires: formulairesAdmin.map(formulaire => ({
            id: formulaire.id,
            type: 'ADMIN_PERSONNEL',
            utilisateur: {
              id: formulaire.utilisateur.id,
              nom_complet: `${formulaire.utilisateur.prenoms} ${formulaire.utilisateur.nom}`,
              nom_utilisateur: formulaire.utilisateur.nom_utilisateur,
              role: formulaire.utilisateur.role,
              email: formulaire.utilisateur.email,
              telephone: formulaire.utilisateur.telephone,
              numero_adhesion: formulaire.utilisateur.numero_adhesion,
              photo_profil_url: formulaire.utilisateur.photo_profil_url,
              selfie_photo_url: formulaire.utilisateur.selfie_photo_url,
              signature_url: formulaire.utilisateur.signature_url
            },
            statut: formulaire.utilisateur.statut,
            raison_rejet: formulaire.utilisateur.raison_rejet,
            rejete_le: formulaire.utilisateur.rejete_le,
            rejete_par: formulaire.utilisateur.rejete_par,
            date_soumission: formulaire.cree_le,
            derniere_mise_a_jour: formulaire.modifie_le,
            url_fiche_formulaire: formulaire.url_image_formulaire,
            version: formulaire.numero_version,
            donnees_snapshot: formulaire.donnees_snapshot
          })),
          pagination: {
            page: parseInt(page),
            limite: parseInt(limite),
            total: totalFormulaires,
            pages_total: Math.ceil(totalFormulaires / parseInt(limite))
          }
        }
      });

    } catch (error) {
      logger.error('Erreur liste formulaires admin:', error);
      res.status(500).json({
        erreur: 'Erreur lors de la r√©cup√©ration des formulaires administrateurs',
        code: 'ERREUR_LISTE_FORMULAIRES_ADMIN'
      });
    }
  }

  /**
   * Approuver un formulaire personnel d'administrateur
   */
  async approuverFormulaireAdmin(req, res) {
    try {
      const idSecretaire = req.utilisateur.id;
      const { id_formulaire, url_formulaire_final, carte_recto_url, carte_verso_url, commentaire } = req.body;

      if (!id_formulaire) {
        return res.status(400).json({
          erreur: 'ID du formulaire requis',
          code: 'DONNEES_MANQUANTES'
        });
      }

      if (!url_formulaire_final) {
        return res.status(400).json({
          erreur: 'URL du formulaire final requis',
          code: 'URL_FORMULAIRE_MANQUANT',
          message: 'Le PDF final avec signatures doit √™tre g√©n√©r√© par le frontend avant approbation'
        });
      }

      // R√©cup√©rer le formulaire d'administrateur
      const formulaireAdmin = await prisma.formulaireAdhesion.findUnique({
        where: { id: parseInt(id_formulaire) },
        include: {
          utilisateur: {
            select: {
              id: true,
              prenoms: true,
              nom: true,
              nom_utilisateur: true,
              role: true,
              email: true,
              statut: true
            }
          }
        }
      });

      if (!formulaireAdmin) {
        return res.status(404).json({
          erreur: 'Formulaire administrateur non trouv√©',
          code: 'FORMULAIRE_ADMIN_NON_TROUVE'
        });
      }

      // V√©rifier que c'est bien un formulaire d'administrateur
      if (!['PRESIDENT', 'SECRETAIRE_GENERALE'].includes(formulaireAdmin.utilisateur.role)) {
        return res.status(400).json({
          erreur: 'Ce formulaire n\'est pas un formulaire d\'administrateur',
          code: 'FORMULAIRE_NON_ADMIN'
        });
      }

      // V√©rifier que l'utilisateur administrateur est en attente
      if (formulaireAdmin.utilisateur.statut !== 'EN_ATTENTE') {
        return res.status(400).json({
          erreur: 'Cet administrateur n\'est pas en attente d\'approbation',
          code: 'ADMIN_NON_EN_ATTENTE'
        });
      }

      // Validate membership card URLs if provided
      if (carte_recto_url || carte_verso_url) {
        if (!carte_recto_url || !carte_verso_url) {
          return res.status(400).json({
            erreur: 'Les deux URLs de carte de membre (recto et verso) sont requises si des cartes sont fournies',
            code: 'CARTES_INCOMPLETES',
            message: 'Fournissez √† la fois carte_recto_url et carte_verso_url'
          });
        }

        // Validate card URLs with schema
        try {
          genererCartesMembreSchema.parse({
            id_utilisateur: formulaireAdmin.utilisateur.id,
            carte_recto_url: carte_recto_url,
            carte_verso_url: carte_verso_url
          });
        } catch (validationError) {
          return res.status(400).json({
            erreur: 'Donn√©es des cartes de membre invalides',
            code: 'VALIDATION_CARTES_ECHOUEE',
            details: validationError.errors || []
          });
        }
      }

      // D√©terminer le pr√©fixe bas√© sur le r√¥le
      const prefixeRole = formulaireAdmin.utilisateur.role === 'PRESIDENT' ? 'P' : 'SG';

      // G√©n√©rer un code de formulaire pour l'administrateur
      let codeFormulaire = formulaireAdmin.utilisateur.code_formulaire;
      if (!codeFormulaire) {
        const anneeCourante = new Date().getFullYear();
        const nombreApprouves = await prisma.utilisateur.count({
          where: { statut: 'APPROUVE', role: formulaireAdmin.utilisateur.role }
        });
        codeFormulaire = `N¬∞${String(nombreApprouves + 1).padStart(3, '0')}/AGCO/${prefixeRole}/${anneeCourante}`;
      }

      // G√©n√©rer le num√©ro d'adh√©sion lors de l'approbation
      const compteurApprouves = await prisma.utilisateur.count({
        where: { statut: 'APPROUVE', role: formulaireAdmin.utilisateur.role }
      });
      const numeroAdhesion = `N¬∞${String(compteurApprouves + 1).padStart(3, '0')}/AGCO/${prefixeRole}/${new Date().getFullYear()}`;

      // Prepare update data
      const updateData = {
        statut: 'APPROUVE',
        numero_adhesion: numeroAdhesion, // Attribution du num√©ro lors de l'approbation
        code_formulaire: codeFormulaire,
        carte_emise_le: new Date(), // Date d'√©mission de la carte
        modifie_le: new Date()
      };

      // Add membership card URLs if provided
      if (carte_recto_url && carte_verso_url) {
        updateData.carte_recto_url = carte_recto_url;
        updateData.carte_verso_url = carte_verso_url;
        updateData.carte_generee_le = new Date();
        updateData.carte_generee_par = idSecretaire;
      }

      // Approuver l'utilisateur administrateur dans une transaction atomique
      logger.info(`Mise √† jour du statut administrateur ${formulaireAdmin.utilisateur.id} vers APPROUVE`, {
        admin_id: formulaireAdmin.utilisateur.id,
        admin_role: formulaireAdmin.utilisateur.role,
        update_data: updateData
      });
      
      const utilisateurApprouve = await prisma.$transaction(async (tx) => {
        // Mettre √† jour le statut de l'utilisateur administrateur
        const utilisateurMisAJour = await tx.utilisateur.update({
          where: { id: formulaireAdmin.utilisateur.id },
          data: updateData
        });
        
        logger.info(`Statut administrateur mis √† jour avec succ√®s`, {
          admin_id: utilisateurMisAJour.id,
          nouveau_statut: utilisateurMisAJour.statut,
          numero_adhesion: utilisateurMisAJour.numero_adhesion
        });

        // Mettre √† jour le formulaire d'adh√©sion avec le PDF final
        logger.info(`Mise √† jour synchrone du PDF final pour administrateur ${formulaireAdmin.utilisateur.id}`);
        
        await tx.formulaireAdhesion.updateMany({
          where: { 
            id_utilisateur: formulaireAdmin.utilisateur.id,
            est_version_active: true
          },
          data: {
            url_image_formulaire: url_formulaire_final,
            est_version_active: true
          }
        });
        
        logger.info(`PDF final synchrone mis √† jour pour administrateur ${formulaireAdmin.utilisateur.id}`);
        
        return utilisateurMisAJour;
      });

      // Journal d'audit
      await prisma.journalAudit.create({
        data: {
          id_utilisateur: idSecretaire,
          action: 'APPROUVER_FORMULAIRE_ADMIN',
          details: {
            formulaire_id: formulaireAdmin.id,
            admin_id: formulaireAdmin.utilisateur.id,
            admin_role: formulaireAdmin.utilisateur.role,
            admin_nom: `${formulaireAdmin.utilisateur.prenoms} ${formulaireAdmin.utilisateur.nom}`,
            type_formulaire: 'ADMIN_PERSONNEL',
            numero_adhesion: numeroAdhesion,
            code_formulaire: codeFormulaire,
            url_formulaire_final: url_formulaire_final,
            commentaire: commentaire || null,
            cartes_membre_ajoutees: !!(carte_recto_url && carte_verso_url),
            carte_recto_url: carte_recto_url || null,
            carte_verso_url: carte_verso_url || null
          },
          adresse_ip: req.ip,
          agent_utilisateur: req.get('User-Agent')
        }
      });

      logger.info(`Formulaire personnel administrateur approuv√©: ${formulaireAdmin.utilisateur.role} ${formulaireAdmin.utilisateur.prenoms} ${formulaireAdmin.utilisateur.nom}`);

      res.json({
        message: 'Formulaire personnel administrateur approuv√© avec succ√®s',
        formulaire: {
          id: formulaireAdmin.id,
          type: 'ADMIN_PERSONNEL',
          utilisateur: {
            id: formulaireAdmin.utilisateur.id,
            nom_complet: `${formulaireAdmin.utilisateur.prenoms} ${formulaireAdmin.utilisateur.nom}`,
            role: formulaireAdmin.utilisateur.role
          },
          statut: utilisateurApprouve.statut,
          numero_adhesion: numeroAdhesion,
          code_formulaire: codeFormulaire,
          url_formulaire_final: url_formulaire_final,
          date_approbation: utilisateurApprouve.modifie_le
        },
        actions_effectuees: [
          '‚úÖ Formulaire personnel administrateur approuv√©',
          'üè∑Ô∏è Code de formulaire g√©n√©r√©',
          'üìÑ Num√©ro d\'adh√©sion attribu√©',
          'üìã Informations personnelles valid√©es',
          'üìÑ Formulaire final avec signatures sauvegard√©',
          'üîê Acc√®s √† l\'application maintenu (pas d\'impact sur la connexion)',
          'üìß Notification envoy√©e √† l\'administrateur',
          ...(carte_recto_url && carte_verso_url ? ['üé¥ Cartes de membre (recto/verso) ajout√©es'] : [])
        ],
        cartes_membre: (carte_recto_url && carte_verso_url) ? {
          recto_url: carte_recto_url,
          verso_url: carte_verso_url,
          generee_le: utilisateurApprouve.carte_generee_le,
          generee_par: idSecretaire
        } : null,
        impact_connexion: {
          peut_se_connecter: true,
          acces_application: 'COMPLET',
          message: 'L\'approbation n\'affecte pas la capacit√© de connexion de l\'administrateur'
        }
      });

    } catch (error) {
      logger.error('Erreur approbation formulaire admin:', error);
      res.status(500).json({
        erreur: 'Erreur lors de l\'approbation du formulaire administrateur',
        code: 'ERREUR_APPROBATION_FORMULAIRE_ADMIN'
      });
    }
  }

  /**
   * Rejeter un formulaire personnel d'administrateur
   */
  async rejeterFormulaireAdmin(req, res) {
    try {
      const idSecretaire = req.utilisateur.id;
      const { id_formulaire, raison } = req.body;

      if (!id_formulaire || !raison) {
        return res.status(400).json({
          erreur: 'ID du formulaire et raison du rejet requis',
          code: 'DONNEES_MANQUANTES'
        });
      }

      // R√©cup√©rer le formulaire d'administrateur
      const formulaireAdmin = await prisma.formulaireAdhesion.findUnique({
        where: { id: parseInt(id_formulaire) },
        include: {
          utilisateur: {
            select: {
              id: true,
              prenoms: true,
              nom: true,
              nom_utilisateur: true,
              role: true,
              email: true,
              statut: true
            }
          }
        }
      });

      if (!formulaireAdmin) {
        return res.status(404).json({
          erreur: 'Formulaire administrateur non trouv√©',
          code: 'FORMULAIRE_ADMIN_NON_TROUVE'
        });
      }

      // V√©rifier que c'est bien un formulaire d'administrateur
      if (!['PRESIDENT', 'SECRETAIRE_GENERALE'].includes(formulaireAdmin.utilisateur.role)) {
        return res.status(400).json({
          erreur: 'Ce formulaire n\'est pas un formulaire d\'administrateur',
          code: 'FORMULAIRE_NON_ADMIN'
        });
      }

      // V√©rifier que l'utilisateur administrateur est en attente
      if (formulaireAdmin.utilisateur.statut !== 'EN_ATTENTE') {
        return res.status(400).json({
          erreur: 'Cet administrateur n\'est pas en attente d\'approbation',
          code: 'ADMIN_NON_EN_ATTENTE'
        });
      }

      // Rejeter l'utilisateur administrateur (mettre √† jour son statut)
      const utilisateurRejete = await prisma.utilisateur.update({
        where: { id: formulaireAdmin.utilisateur.id },
        data: {
          statut: 'REJETE',
          raison_rejet: raison,
          rejete_le: new Date(),
          rejete_par: idSecretaire,
          modifie_le: new Date()
        }
      });

      // Journal d'audit avec d√©tails du rejet
      await prisma.journalAudit.create({
        data: {
          id_utilisateur: idSecretaire,
          action: 'REJETER_FORMULAIRE_ADMIN',
          details: {
            formulaire_id: formulaireAdmin.id,
            admin_id: formulaireAdmin.utilisateur.id,
            admin_role: formulaireAdmin.utilisateur.role,
            admin_nom: `${formulaireAdmin.utilisateur.prenoms} ${formulaireAdmin.utilisateur.nom}`,
            type_formulaire: 'ADMIN_PERSONNEL',
            raison_rejet: raison
          },
          adresse_ip: req.ip,
          agent_utilisateur: req.get('User-Agent')
        }
      });

      logger.info(`Formulaire personnel administrateur rejet√©: ${formulaireAdmin.utilisateur.role} ${formulaireAdmin.utilisateur.prenoms} ${formulaireAdmin.utilisateur.nom}`);

      res.json({
        message: 'Formulaire personnel administrateur rejet√©',
        formulaire: {
          id: formulaireAdmin.id,
          type: 'ADMIN_PERSONNEL',
          utilisateur: {
            id: formulaireAdmin.utilisateur.id,
            nom_complet: `${formulaireAdmin.utilisateur.prenoms} ${formulaireAdmin.utilisateur.nom}`,
            role: formulaireAdmin.utilisateur.role
          },
          statut: utilisateurRejete.statut,
          date_rejet: utilisateurRejete.modifie_le
        },
        rejet: {
          raison_principale: raison
        },
        actions_effectuees: [
          '‚ùå Formulaire personnel administrateur rejet√©',
          'üìã Raison du rejet document√©e',
          'üîê Acc√®s √† l\'application maintenu (pas d\'impact sur la connexion)',
          'üìß Notification envoy√©e √† l\'administrateur'
        ],
        impact_connexion: {
          peut_se_connecter: true,
          acces_application: 'COMPLET',
          message: 'Le rejet n\'affecte pas la capacit√© de connexion de l\'administrateur'
        }
      });

    } catch (error) {
      logger.error('Erreur rejet formulaire admin:', error);
      res.status(500).json({
        erreur: 'Erreur lors du rejet du formulaire administrateur',
        code: 'ERREUR_REJET_FORMULAIRE_ADMIN'
      });
    }
  }
}

module.exports = new ControleurSecretaire();