generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Better-Auth User model with SGM fields merged in
model User {
  id            String    @id @default(cuid())
  name          String?   // Better-auth field (first + last name)
  email         String    @unique // Better-auth field
  emailVerified Boolean? // Better-auth field
  image         String?   // Better-auth field (profile photo URL)
  createdAt     DateTime  @default(now()) // Better-auth field
  updatedAt     DateTime  @updatedAt // Better-auth field
  
  // SGM-specific fields (all in English)
  membership_number      String?   @unique // Auto-generated membership number
  birth_date             DateTime? // Date of birth
  birth_place            String?   // Place of birth
  address                String?   // Address
  profession             String?   // Profession
  city_residence         String?   // City of residence
  congo_entry_date       DateTime? // Date of entry to Congo
  employer_school        String?   // Employer/University/School
  phone                  String?   // Phone number
  consular_card_number   String?   @unique // Consular card number
  id_issue_date          DateTime? // ID issue date
  selfie_photo_url       String?   // Selfie photo URL
  member_signature_url   String?   // Member signature URL
  comments               String?   // Optional comments
  spouse_first_name      String?   // Spouse first name
  spouse_last_name       String?   // Spouse last name
  children_count         Int?      // Number of children
  status                 Status    @default(PENDING)
  role                   Role      @default(MEMBER)
  form_code              String?   @unique // Form reference code
  qr_code_url            String?   // QR code URL
  card_issued_at         DateTime? // Card issue date
  rejection_reason       String?   // Rejection reason if status = REJECTED
  rejected_at            DateTime? // Rejection date
  rejected_by            String?   // ID of admin who rejected
  username               String?   @unique // Username for better-auth
  has_paid               Boolean   @default(false) // True if paid physically
  has_submitted_form     Boolean   @default(false) // True if submitted form
  last_login             DateTime? // Last login
  is_active              Boolean   @default(true) // True if account active
  deactivated_at         DateTime? // Deactivation date
  deactivated_by         String?   // ID of admin who deactivated
  deactivation_reason    String?   // Deactivation reason

  // Better-Auth relations
  accounts Account[]
  sessions Session[]
  
  // SGM Relations  
  signatures             Signature[]
  audit_logs             AuditLog[]
  membership_forms       MembershipForm[]
  recovery_tokens        RecoveryToken[]
  official_documents     OfficialDocument[]
  invitationsSent        Invitation[] @relation("InvitationsSent")

  @@map("user")
}

model Signature {
  id                 Int       @id @default(autoincrement())
  president_id       String    // Changed to String to match User.id
  signature_url      String
  cloudinary_id      String    // For deleting from Cloudinary if needed
  is_active          Boolean   @default(true)
  uploaded_at        DateTime  @default(now())

  user               User @relation(fields: [president_id], references: [id])
}

model AuditLog {
  id              Int       @id @default(autoincrement())
  user_id         String?   // Changed to String to match User.id
  action          String    // MEMBERSHIP, APPROVE, REJECT, ASSIGN_CODE, etc.
  details         Json?     // Additional details
  ip_address      String?
  user_agent      String?
  created_at      DateTime  @default(now())

  user            User? @relation(fields: [user_id], references: [id])
}

model MembershipForm {
  id                   Int       @id @default(autoincrement())
  user_id              String    // Changed to String to match User.id
  version_number       Int       // Version 1, 2, 3, etc.
  form_image_url       String    // URL of generated form image
  data_snapshot        Json      // Snapshot of data used to generate this version
  is_active_version    Boolean   @default(true) // Current version (only one active per user)
  created_at           DateTime  @default(now())
  
  user                 User @relation(fields: [user_id], references: [id])
  
  @@unique([user_id, version_number])
}

model RecoveryToken {
  id             Int       @id @default(autoincrement())
  user_id        String    // Changed to String to match User.id
  token          String    @unique
  expires_at     DateTime
  used           Boolean   @default(false)
  created_at     DateTime  @default(now())
  
  user           User @relation(fields: [user_id], references: [id])
}

model OfficialDocument {
  id                 Int       @id @default(autoincrement())
  title              String    // Document title
  description        String?   // Optional description
  document_type      OfficialDocumentType // Document type
  cloudinary_url     String    // PDF file URL on Cloudinary
  cloudinary_id      String    // Cloudinary ID for management/deletion
  file_size          Int?      // File size in bytes
  original_filename  String    // Original file name
  
  // Upload information
  uploaded_by        String    // Changed to String - ID of secretary who uploaded
  uploaded_at        DateTime  @default(now())
  updated_at         DateTime  @updatedAt
  
  // Status and visibility
  is_active          Boolean   @default(true) // True if visible to members
  
  // Relations
  user               User @relation(fields: [uploaded_by], references: [id])
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}

enum Role {
  MEMBER
  ADMIN
}

enum OfficialDocumentType {
  MEETING_MINUTES
  REPORT
  DECISION
  INTERNAL_REGULATIONS
}

// Better-Auth Account model (matches better-auth expectations)
model Account {
  id                String  @id @default(cuid())
  accountId         String  @unique
  providerId        String
  userId            String
  accessToken       String? @map("access_token") @db.Text
  refreshToken      String? @map("refresh_token") @db.Text
  idToken           String? @map("id_token") @db.Text
  accessTokenExpiresAt DateTime? @map("access_token_expires_at")
  refreshTokenExpiresAt DateTime? @map("refresh_token_expires_at")
  scope             String?
  password          String? @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("account")
}

// Better-Auth Session model (matches better-auth expectations)
model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

// Invitation model for RBAC system
model Invitation {
  id         String   @id @default(cuid())
  email      String   @unique
  role       Role     @default(MEMBER)
  invitedBy  String   // ID of the admin who sent the invitation
  expiresAt  DateTime
  status     String   @default("pending") // pending, accepted, expired
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  inviter    User     @relation("InvitationsSent", fields: [invitedBy], references: [id])

  @@map("invitation")
}

